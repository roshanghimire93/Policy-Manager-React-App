{"version":3,"sources":["container/logo.svg","component/Policies.js","component/PoliciesArray.js","component/SearchBox.js","component/ErrorBoundary.js","component/Scroll.js","container/App.js","serviceWorker.js","index.js"],"names":["module","exports","Policies","id","link","name","href","target","rel","className","PoliciesArray","PoliciesList","map","policy","key","title","SearchBox","searchChange","onChange","type","placeholder","ErrorBoundary","props","state","hasError","this","children","error","React","Component","Scroll","style","overflowY","border","height","App","onSearchChange","event","setState","searchfield","value","fetch","then","response","json","users","filteredlist","filter","toLowerCase","includes","length","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,kC,uOCW5BC,EATE,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KACrB,OACI,6BACI,uBAAGC,KAAMF,EAAMG,OAAO,SAASC,IAAI,sBAAsBC,UAAY,aACpEJ,KCUFK,G,MAZO,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEpB,OACI,yBAAKF,UAAU,WACVE,EAAaC,KAAI,SAAAC,GACd,OAAO,kBAAC,EAAD,CAAUC,IAAOD,EAAOV,GAAIE,KAAQQ,EAAOE,MAAOX,KAAQS,EAAOT,aCEzEY,G,MATG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEhB,OACI,yBAAKR,UAAY,OACb,2BAAOS,SAAYD,EAAcR,UAAU,uCAAuCU,KAAK,SAASC,YAAY,uBCiBvGC,E,YApBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,UAAU,GAFR,E,sEAWjB,OAAIC,KAAKF,MAAMC,SAEN,qDAGFC,KAAKH,MAAMI,Y,gDAXYC,GAE9B,MAAO,CAAEH,UAAU,O,GARGI,IAAMC,WCQnBC,EARA,SAACR,GACZ,OACI,yBAAKS,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEZ,EAAMI,WCuDJS,E,YAjDb,aAAc,IAAD,8BACX,+CAOFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAM9B,OAAOiC,SAPzC,EAAKjB,MAAQ,CACXZ,aAAc,GACd4B,YAAa,IAJJ,E,iFAYO,IAAD,OACjBE,MAAM,qEAAqEC,MAAK,SAAAC,GAC9E,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,OAAO,EAAKP,SAAS,CAAC3B,aAAckC,S,+BAI/B,IAAD,OACAC,EAAerB,KAAKF,MAAMZ,aAAaoC,QAAO,SAAAlC,GAClD,OAAOA,EAAOE,MAAMiC,cAAcC,SAAS,EAAK1B,MAAMgB,YAAYS,kBAEpE,OAAsC,IAAnCvB,KAAKF,MAAMZ,aAAauC,OAEvB,yBAAKzC,UAAU,MACb,yBAAKA,UAAU,WAAW0C,IAAKC,IAAMC,IAAI,SACzC,sCAAW,0BAAM5C,UAAU,SAAhB,SAMb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,SAAd,YACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAWQ,aAAgBQ,KAAKW,iBAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAezB,aAAgBmC,W,GA1C3BjB,aCGEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.90a887ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nconst Policies = ({id, link, name}) => {\n        return (\n            <div>\n                <a href={link} target='_blank' rel=\"noopener noreferrer\" className = 'item grow'>\n                {name}</a>\n            </div>\n        )\n    }\n\nexport default Policies;","import React from 'react'\nimport Policies from './Policies'\nimport './Policies.css'\n\nconst PoliciesArray = ({PoliciesList}) => {\n\n    return (\n        <div className='wrapper'>\n            {PoliciesList.map(policy => {\n                return <Policies key = {policy.id} name = {policy.title} link = {policy.link}/>\n            })\n        }\n        </div>\n    )\n}\n\nexport default PoliciesArray;","import React from 'react'\n\nconst SearchBox = ({searchChange}) => {\n    \n    return (\n        <div className = 'pa2'>\n            <input onChange = {searchChange} className='pa2 mb3 ba b--green bg-lightest-blue' type='search' placeholder='search policies'/>\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { hasError: false };\n    }\n  \n    static getDerivedStateFromError(error) {\n      // Update state so the next render will show the fallback UI.\n      return { hasError: true };\n    }\n  \n    render() {\n      if (this.state.hasError) {\n        // You can render any custom fallback UI\n        return <h1>Something went wrong.</h1>;\n      }\n  \n      return this.props.children; \n    }\n  }\n\n  export default ErrorBoundary;","import React from 'react'\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '3px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\nimport './App.css';\nimport logo from './logo.svg'\nimport PoliciesArray from '../component/PoliciesArray';\nimport 'tachyons';\nimport SearchBox from '../component/SearchBox';\nimport ErrorBoundary from '../component/ErrorBoundary';\nimport Scroll from '../component/Scroll';\n\nclass App extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      PoliciesList: [],\n      searchfield: ''\n    }\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchfield: event.target.value})\n  }\n\n  componentDidMount(){\n    fetch('https://my-json-server.typicode.com/roshanghimire93/demo/policies').then(response => {\n      return response.json()\n    })\n    .then(users => {\n      return this.setState({PoliciesList: users})\n    })\n  }\n  \n  render(){\n    const filteredlist = this.state.PoliciesList.filter(policy => {\n      return policy.title.toLowerCase().includes(this.state.searchfield.toLowerCase())\n    })\n    if(this.state.PoliciesList.length === 0){\n      return(\n        <div className='tc'>\n          <img className='App-logo' src={logo} alt='logo'/>\n          <h1>Loading<span className='blink'>...</span></h1>\n        </div>\n      )\n    }\n    else{\n      return (\n        <div className='App'>\n          <h1 className='Title'>POLICIES</h1>\n          <ErrorBoundary>\n            <SearchBox searchChange = {this.onSearchChange}/>\n            <Scroll>\n              <PoliciesArray PoliciesList = {filteredlist}/>\n            </Scroll>\n          </ErrorBoundary>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}